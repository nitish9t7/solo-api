let express,createServer,mongoose,cors,models,schema,resolvers,createApolloServer;_65c‍.w("dotenv/config");_65c‍.w("express",[["default",["express"],function(v){express=v}]]);_65c‍.w("http",[["createServer",["createServer"],function(v){createServer=v}]]);_65c‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_65c‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_65c‍.w("./models",[["default",["models"],function(v){models=v}]]);_65c‍.w("./schema",[["default",["schema"],function(v){schema=v}]]);_65c‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_65c‍.w("./utils/apollo-server",[["createApolloServer",["createApolloServer"],function(v){createApolloServer=v}]]);










// Connect to database
mongoose
  .connect(process.env.MONGO_URL, {
    useNewUrlParser: true,
    useFindAndModify: false,
  })
  .then(() => console.log('DB connected'))
  .catch(err => _65c‍.g.console.error(err));

// Initializes application
const app = express();

// Enable cors
const corsOptions = {
  origin: process.env.FRONTEND_URL,
  credentials: true,
};
app.use(cors(corsOptions));

// Create a Apollo Server
const server = createApolloServer(schema, resolvers, models);
server.applyMiddleware({ app, path: '/graphql' });

// Create http server and add subscriptions to it
const httpServer = createServer(app);
server.installSubscriptionHandlers(httpServer);

// Listen to HTTP and WebSocket server
const PORT = process.env.PORT || process.env.API_PORT;
httpServer.listen({ port: PORT }, () => {
  console.log(`server ready at http://localhost:${PORT}${server.graphqlPath}`);
  console.log(
    `Subscriptions ready at ws://localhost:${PORT}${server.subscriptionsPath}`
  );
});
